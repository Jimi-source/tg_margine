import requests
import pandas as pd
from io import StringIO
from datetime import datetime, timedelta
import time
import html

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–º–µ–Ω–∏ —Å–≤–æ–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏) ==========
CLIENT_ID = "547260"
API_KEY = "b0f2a53a-6349-4a9d-9b09-85d22d73fa6f"
HEADERS = {
    "Client-Id": CLIENT_ID,
    "Api-Key": API_KEY,
    "Content-Type": "application/json"
}

TELEGRAM_BOT_TOKEN = "7976964368:AAEN5XGC8IuoQ2ajpHCvxmBd0zozhHefa7A"
TELEGRAM_CHAT_ID = "-1002830424580"

# ========== –¶–µ–Ω—ã –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è ==========
COST_PER_UNIT = {
    "–ë-—Ç—É—Ä–º–∞–ª–∏–Ω": 96.08, "–ë-–≥—Ä–∞–Ω–∞—Ç": 96.08,
    "–ß_–¢—É—Ä–º–∞–ª–∏–Ω": 187.16, "–ß_–≥—Ä–∞–Ω–∞—Ç": 187.16,
    "–ß-—à–ø–∏–Ω–µ–ª—å": 73.65, "–ë-—à–ø–∏–Ω–µ–ª—å": 47.43,
    "–ß-—Ö—Ä–∏–∑–æ–ø—Ä–∞–∑": 73.65, "–ë-—Ö—Ä–∏–∑–æ–ø—Ä–∞–∑": 47.43,
    "–ß-—Å—Ç–µ–∫–ª–æ-—Ä–æ–∑–æ–≤—ã–π": 73.65, "–ë-—Å—Ç–µ–∫–ª–æ-—Ä–æ–∑–æ–≤—ã–π": 47.43,
    "–ß-—Å—Ç–µ–∫–ª–æ-—à–∞–º–ø–∞–Ω—å": 73.65, "–ë-—Å—Ç–µ–∫–ª–æ-—à–∞–º–ø–∞–Ω—å": 47.43,
    "–ß-—Å—Ç–µ–∫–ª–æ-–≥–æ–ª—É–±–æ–π": 73.65, "–ß-—Å—Ç–µ–∫–ª–æ-—Å–µ—Ä—ã–π": 73.65,
    "–ß-—Å—Ç–µ–∫–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π": 73.65, "–ß-—Å—Ç–µ–∫–ª–æ-–∑–µ–ª–µ–Ω—ã–π": 73.65,
    "–ß-–ª–∞–∑—É—Ä–∏—Ç": 168.24, "–ë-–ª–∞–∑—É—Ä–∏—Ç": 87.97,
    "–ß-–∫–≤–∞—Ä—Ü": 168.24, "–ë-–∫–≤–∞—Ä—Ü": 87.97,
    "–ß-—Ü–∏—Ä–∫–æ–Ω-–∑–µ–ª–µ–Ω—ã–π": 168.24, "–ë-—Ü–∏—Ä–∫–æ–Ω-–∑–µ–ª–µ–Ω—ã–π": 87.97,
    "–ß-—Ü–∏—Ä–∫–æ–Ω-—Ä–æ–∑–æ–≤—ã–π": 168.24, "–ë-—Ü–∏—Ä–∫–æ–Ω-—Ä–æ–∑–æ–≤—ã–π": 87.97,
    "–ß-—Ü–∏—Ä–∫–æ–Ω-–±–µ–ª—ã–π": 168.24, "–ë-—Ü–∏—Ä–∫–æ–Ω-–±–µ–ª—ã–π": 87.97,
    "–ß-—Ü–∏—Ä–∫–æ–Ω-–º—É–ª—å—Ç–∏–∫–æ–ª–æ—Ä": 168.24, "–ë-—Ü–∏—Ä–∫–æ–Ω-–º—É–ª—å—Ç–∏–∫–æ–ª–æ—Ä": 87.97,
    "–ß-—Ü–∏—Ä–∫–æ–Ω-—á–µ—Ä–Ω—ã–π": 168.24, "–ë-—Ü–∏—Ä–∫–æ–Ω-—á–µ—Ä–Ω—ã–π": 87.97
}

ARTICLE_SKU_MAP = {
    '–ß_–¢—É—Ä–º–∞–ª–∏–Ω': 1208106724, '–ß_–≥—Ä–∞–Ω–∞—Ç': 1208199002, '–ë-–≥—Ä–∞–Ω–∞—Ç': 1208375649, '–ë-—Ç—É—Ä–º–∞–ª–∏–Ω': 1208429965,
    '–ë-—à–ø–∏–Ω–µ–ª—å': 1233191715, '–ß-—à–ø–∏–Ω–µ–ª—å': 1234855167, '–ë-—Ö—Ä–∏–∑–æ–ø—Ä–∞–∑': 1234433455, '–ß-—Ö—Ä–∏–∑–æ–ø—Ä–∞–∑': 1233276671,
    '–ß-—Å—Ç–µ–∫–ª–æ-—Ä–æ–∑–æ–≤—ã–π': 1398800424, '–ß-—Å—Ç–µ–∫–ª–æ-—à–∞–º–ø–∞–Ω—å': 1398806571, '–ë-—Å—Ç–µ–∫–ª–æ-—Ä–æ–∑–æ–≤—ã–π': 1398819316,
    '–ë-—Å—Ç–µ–∫–ª–æ-—à–∞–º–ø–∞–Ω—å': 1398829004, '–ß-—Å—Ç–µ–∫–ª–æ-–≥–æ–ª—É–±–æ–π': 1472190673, '–ß-—Å—Ç–µ–∫–ª–æ-—Å–µ—Ä—ã–π': 1472367322,
    '–ß-—Å—Ç–µ–∫–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': 1472324885, '–ß-—Å—Ç–µ–∫–ª–æ-–∑–µ–ª–µ–Ω—ã–π': 1472412698, '–ß-–ª–∞–∑—É—Ä–∏—Ç': 1472437665,
    '–ë-–ª–∞–∑—É—Ä–∏—Ç': 1472466740, '–ß-–∫–≤–∞—Ä—Ü': 1472585073, '–ë-–∫–≤–∞—Ä—Ü': 1472642103, '–ß-—Ü–∏—Ä–∫–æ–Ω-—á–µ—Ä–Ω—ã–π': 1579502213,
    '–ß-—Ü–∏—Ä–∫–æ–Ω-–º—É–ª—å—Ç–∏–∫–æ–ª–æ—Ä': 1579545184, '–ß-—Ü–∏—Ä–∫–æ–Ω-–±–µ–ª—ã–π': 1579564271, '–ß-—Ü–∏—Ä–∫–æ–Ω-—Ä–æ–∑–æ–≤—ã–π': 1579566624,
    '–ë-—Ü–∏—Ä–∫–æ–Ω-—á–µ—Ä–Ω—ã–π': 1579573148, '–ë-—Ü–∏—Ä–∫–æ–Ω-–º—É–ª—å—Ç–∏–∫–æ–ª–æ—Ä': 1579574840, '–ë-—Ü–∏—Ä–∫–æ–Ω-–±–µ–ª—ã–π': 1579585026,
    '–ë-—Ü–∏—Ä–∫–æ–Ω-—Ä–æ–∑–æ–≤—ã–π': 1579587090, '–ë-—Ü–∏—Ä–∫–æ–Ω-–∑–µ–ª–µ–Ω—ã–π': 1580206314, '–ß-—Ü–∏—Ä–∫–æ–Ω-–∑–µ–ª–µ–Ω—ã–π': 1580215860
}

# ========== –£—Ç–∏–ª–∏—Ç—ã ==========
def chunks(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

def escape(text):
    return html.escape(str(text))

# ========== –î–∞—Ç—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ (OZON) ==========
today = datetime.now()
yesterday = today - timedelta(days=1)
two_months_ago = today - timedelta(days=62)

processed_at_from = two_months_ago.strftime("%Y-%m-%dT00:00:00.000Z")
processed_at_to = yesterday.strftime("%Y-%m-%dT23:59:59.999Z")
yesterday_from = yesterday.strftime("%Y-%m-%dT00:00:00.000Z")
yesterday_to = yesterday.strftime("%Y-%m-%dT23:59:59.999Z")

create_url = "https://api-seller.ozon.ru/v1/report/postings/create"
create_payload = {
    "filter": {
        "processed_at_from": processed_at_from,
        "processed_at_to": processed_at_to,
        "delivery_schema": ["fbo"],
        "sku": []
    },
    "language": "DEFAULT"
}
create_resp = requests.post(create_url, json=create_payload, headers=HEADERS)
create_resp.raise_for_status()
code = create_resp.json().get("result", {}).get("code")
if not code:
    raise SystemExit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å code –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")

info_url = "https://api-seller.ozon.ru/v1/report/info"
file_url = None
max_attempts = 20
for attempt in range(max_attempts):
    info_resp = requests.post(info_url, json={"code": code}, headers=HEADERS)
    info_resp.raise_for_status()
    info_result = info_resp.json().get("result", {})
    status = info_result.get("status")
    # debug: print("report status:", status)
    if status == "success":
        file_url = info_result.get("file")
        break
    time.sleep(5)
if not file_url:
    raise SystemExit("–û—Ç—á—ë—Ç –Ω–µ –±—ã–ª –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")

# ========== –ß—Ç–µ–Ω–∏–µ CSV –æ—Ç—á—ë—Ç–∞ ==========
csv_text = requests.get(file_url).text
df = pd.read_csv(StringIO(csv_text), sep=';')
df["–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"] = pd.to_datetime(df.get("–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"), format="%Y-%m-%d %H:%M:%S", errors='coerce')

# ========== –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∞–≤–æ–∫ ==========
deliveries = df[df["–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"].dt.date == yesterday.date()]
if deliveries.empty:
    article_counts = pd.Series(dtype=int)
else:
    article_counts = deliveries.groupby("–ê—Ä—Ç–∏–∫—É–ª")["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].sum()  # Series: index=–ê—Ä—Ç–∏–∫—É–ª, value=count

total_cost = 0.0
for article, qty in article_counts.items():
    total_cost += COST_PER_UNIT.get(article, 0) * qty

# ========== –û—Å—Ç–∞—Ç–∫–∏ (stock_on_warehouses) ==========
stock_url = "https://api-seller.ozon.ru/v2/analytics/stock_on_warehouses"
stock_payload = {"limit": 1000, "offset": 0, "warehouse_type": "ALL"}
stock_resp = requests.post(stock_url, json=stock_payload, headers=HEADERS)
stock_resp.raise_for_status()
stock_rows = stock_resp.json().get("result", {}).get("rows", [])

# —Å—É–º–º–∏—Ä—É–µ–º –ø–æ SKU (–∫–ª—é—á ‚Äî int sku)
stock_totals = {}       # sku -> free_to_sell sum
promised_totals = {}    # sku -> promised_amount sum
for r in stock_rows:
    sku = r.get("sku")
    if sku is None:
        continue
    free = r.get("free_to_sell_amount", 0) or 0
    promised = r.get("promised_amount", 0) or 0
    stock_totals[sku] = stock_totals.get(sku, 0) + free
    promised_totals[sku] = promised_totals.get(sku, 0) + promised

# ========== –ü–æ–ª—É—á–µ–Ω–∏–µ ads –∏ idc –∏–∑ turnover/stocks –ø–∞–∫–µ—Ç–Ω–æ ==========
turnover_url = "https://api-seller.ozon.ru/v1/analytics/turnover/stocks"
# –¥–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ SKU, —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ article_counts (—á—Ç–æ–±—ã –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤)
needed_skus = []
for art in article_counts.index:
    sku = ARTICLE_SKU_MAP.get(art)
    if sku:
        needed_skus.append(sku)

ads_by_sku = {}
idc_by_sku = {}
# –µ—Å–ª–∏ –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö SKU ‚Äî –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º–∏
if needed_skus:
    for chunk in chunks(needed_skus, 50):
        payload = {"limit": len(chunk), "offset": 0, "sku": chunk}
        r = requests.post(turnover_url, json=payload, headers=HEADERS)
        r.raise_for_status()
        j = r.json()
        # API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å items –ª–∏–±–æ –≤ –∫–æ—Ä–Ω–µ, –ª–∏–±–æ –≤ result
        items = j.get("items") or j.get("result", {}).get("items") or []
        for it in items:
            sku = it.get("sku")
            if sku is None:
                continue
            ads_by_sku[sku] = it.get("ads", 0) or 0
            idc_by_sku[sku] = it.get("idc", 0) or 0
        time.sleep(0.2)  # –ª–µ–≥–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏

# ========== –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ==========
transaction_url = "https://api-seller.ozon.ru/v3/finance/transaction/totals"
transaction_payload = {
    "date": {"from": yesterday_from, "to": yesterday_to},
    "posting_number": "",
    "transaction_type": "all"
}
trans_resp = requests.post(transaction_url, json=transaction_payload, headers=HEADERS)
trans_resp.raise_for_status()
transaction_data = trans_resp.json().get("result", {})

table_data = {
    "–ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã": transaction_data.get("accruals_for_sale", 0) or 0,
    "–∫–æ–º–∏—Å—Å–∏—è –û–∑–æ–Ω": transaction_data.get("sale_commission", 0) or 0,
    "–¥–æ—Å—Ç–∞–≤–∫–∞": transaction_data.get("processing_and_delivery", 0) or 0,
    "–≤–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã": transaction_data.get("refunds_and_cancellations", 0) or 0,
    "—É—Å–ª—É–≥–∏/—Ä–µ–∫–ª–∞–º–∞": transaction_data.get("services_amount", 0) or 0,
    "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏": transaction_data.get("compensation_amount", 0) or 0,
    "–¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥–∞–≤—Ü–∞": transaction_data.get("money_transfer", 0) or 0,
    "–¥–æ–ø —É—Å–ª—É–≥–∏": transaction_data.get("others_amount", 0) or 0,
    "—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤": total_cost
}
total_income = sum(v for k, v in table_data.items() if k != "—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤")
table_data["–∏—Ç–æ–≥–æ–≤–∞—è –º–∞—Ä–∂–∞"] = f"{((total_income - total_cost) / total_income) * 100:.2f}%" if total_income else "0%"

# ========== –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ==========
lines = []
lines.append(f"<b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Ç–æ–≥–∏ –∑–∞ {yesterday.strftime('%d.%m.%Y')}</b>")
lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
lines.append("üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º:")

# –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–π—Ç–µ–º–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ idc
items = []
for article, qty in article_counts.items():
    sku = ARTICLE_SKU_MAP.get(article)
    if sku is None:
        # –µ—Å–ª–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏–º —Å –º–∞—Ä–∫–µ—Ä–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è SKU
        items.append({
            "article": article,
            "qty": int(qty),
            "sku": None,
            "idc": float('inf'),
            "free": 0,
            "promised": 0,
            "ads": 0,
            "missing_sku": True
        })
        continue

    free = stock_totals.get(sku, 0)
    promised = promised_totals.get(sku, 0)
    ads = ads_by_sku.get(sku, 0)
    idc = idc_by_sku.get(sku, 0)

    items.append({
        "article": article,
        "qty": int(qty),
        "sku": sku,
        "idc": idc if idc is not None else float('inf'),
        "free": free,
        "promised": promised,
        "ads": ads,
        "missing_sku": False
    })

# —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ idc (–º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –≤–ø–µ—Ä–µ–¥)
items.sort(key=lambda x: (x["idc"] if x["idc"] is not None else float('inf')))

# –î–æ–±–∞–≤–ª—è–µ–º –≤ lines –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
for it in items:
    if it["missing_sku"]:
        lines.append(f"üíé {escape(it['article'])}: {it['qty']} (–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ SKU –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
    else:
        lines.append(
            f"üíé {escape(it['article'])}: {it['qty']} "
            f"(<b>{int(it['idc'])} –¥–Ω–µ–π –¥–æ 0</b>; –æ—Å—Ç–∞—Ç–∫–∏: {int(it['free'])}; –≤ –ø—É—Ç–∏: {int(it['promised'])}; –ø—Ä–æ–¥–∞–∂–∏: {it['ads']:.2f})"
        )

lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
lines.append("üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
base = table_data.get("–ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã", 0) or 1
for key, val in table_data.items():
    if key == "–∏—Ç–æ–≥–æ–≤–∞—è –º–∞—Ä–∂–∞":
        lines.append(f"üìà {escape(key)}: {escape(val)}")
    else:
        emoji = "üü¢" if val > 0 else "üî¥"
        percent = (val / base) * 100
        lines.append(f"{emoji} {escape(key)}:\n{val:.2f} ({percent:.2f}%)")

output_text = "\n".join(lines)

# ========== –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ==========
send_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
params = {"chat_id": TELEGRAM_CHAT_ID, "text": output_text, "parse_mode": "HTML"}
resp = requests.post(send_url, params=params)
if resp.status_code == 200:
    print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
else:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", resp.status_code, resp.text)
