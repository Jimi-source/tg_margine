import pandas as pd
import requests
from io import StringIO
from datetime import datetime, timedelta
import time
import html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API Ozon
CLIENT_ID = "547260"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Client-ID
API_KEY = "b0f2a53a-6349-4a9d-9b09-85d22d73fa6f"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Api-Key
HEADERS = {
    "Client-Id": CLIENT_ID,
    "Api-Key": API_KEY,
    "Content-Type": "application/json"
}

# –°–ª–æ–≤–∞—Ä—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (–∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É)
COST_PER_UNIT = {
    "–ë-—Ç—É—Ä–º–∞–ª–∏–Ω": 112.75,
    "–ë-–≥—Ä–∞–Ω–∞—Ç": 112.75,
    "–ß_–¢—É—Ä–º–∞–ª–∏–Ω": 203.83,
    "–ß_–≥—Ä–∞–Ω–∞—Ç": 203.83,
    "–ß-—à–ø–∏–Ω–µ–ª—å": 95.04,
    "–ë-—à–ø–∏–Ω–µ–ª—å": 66.13,
    "–ß-—Ö—Ä–∏–∑–æ–ø—Ä–∞–∑": 95.04,
    "–ë-—Ö—Ä–∏–∑–æ–ø—Ä–∞–∑": 66.13,
    "–ß-—Å—Ç–µ–∫–ª–æ-—Ä–æ–∑–æ–≤—ã–π": 95.04,
    "–ë-—Å—Ç–µ–∫–ª–æ-—Ä–æ–∑–æ–≤—ã–π": 66.13,
    "–ß-—Å—Ç–µ–∫–ª–æ-—à–∞–º–ø–∞–Ω—å": 95.04,
    "–ë-—Å—Ç–µ–∫–ª–æ-—à–∞–º–ø–∞–Ω—å": 66.13,
    "–ß-—Å—Ç–µ–∫–ª–æ-–≥–æ–ª—É–±–æ–π": 95.04,
    "–ß-—Å—Ç–µ–∫–ª–æ-—Å–µ—Ä—ã–π": 95.04,
    "–ß-—Å—Ç–µ–∫–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π": 95.04,
    "–ß-—Å—Ç–µ–∫–ª–æ-–∑–µ–ª–µ–Ω—ã–π": 95.04,
    "–ß-–ª–∞–∑—É—Ä–∏—Ç": 184.91,
    "–ë-–ª–∞–∑—É—Ä–∏—Ç": 104.64,
    "–ß-–∫–≤–∞—Ä—Ü": 184.91,
    "–ë-–∫–≤–∞—Ä—Ü": 104.64,
    "–ß-—Ü–∏—Ä–∫–æ–Ω-–∑–µ–ª–µ–Ω—ã–π": 184.91,
    "–ë-—Ü–∏—Ä–∫–æ–Ω-–∑–µ–ª–µ–Ω—ã–π": 104.64,
    "–ß-—Ü–∏—Ä–∫–æ–Ω-—Ä–æ–∑–æ–≤—ã–π": 184.91,
    "–ë-—Ü–∏—Ä–∫–æ–Ω-—Ä–æ–∑–æ–≤—ã–π": 104.64,
    "–ß-—Ü–∏—Ä–∫–æ–Ω-–±–µ–ª—ã–π": 184.91,
    "–ë-—Ü–∏—Ä–∫–æ–Ω-–±–µ–ª—ã–π": 104.64,
    "–ß-—Ü–∏—Ä–∫–æ–Ω-–º—É–ª—å—Ç–∏–∫–æ–ª–æ—Ä": 184.91,
    "–ë-—Ü–∏—Ä–∫–æ–Ω-–º—É–ª—å—Ç–∏–∫–æ–ª–æ—Ä": 104.64,
    "–ß-—Ü–∏—Ä–∫–æ–Ω-—á–µ—Ä–Ω—ã–π": 184.91,
    "–ë-—Ü–∏—Ä–∫–æ–Ω-—á–µ—Ä–Ω—ã–π": 104.64
}

# –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã
today = datetime.now()
yesterday = today - timedelta(days=1)
two_months_ago = today - timedelta(days=62)

processed_at_from = two_months_ago.strftime("%Y-%m-%dT00:00:00.000Z")
processed_at_to = yesterday.strftime("%Y-%m-%dT23:59:59.999Z")
yesterday_from = yesterday.strftime("%Y-%m-%dT00:00:00.000Z")
yesterday_to = yesterday.strftime("%Y-%m-%dT23:59:59.999Z")

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–∞–º
create_url = "https://api-seller.ozon.ru/v1/report/postings/create"
create_payload = {
    "filter": {
        "processed_at_from": processed_at_from,
        "processed_at_to": processed_at_to,
        "delivery_schema": ["fbo"],
        "sku": [],
        "cancel_reason_id": [],
        "offer_id": "",
        "status_alias": [],
        "statuses": [],
        "title": ""
    },
    "language": "DEFAULT"
}

create_response = requests.post(create_url, json=create_payload, headers=HEADERS)
create_response.raise_for_status()
code = create_response.json()["result"]["code"]

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç—á—ë—Ç–µ
info_url = "https://api-seller.ozon.ru/v1/report/info"
info_payload = {"code": code}

max_attempts = 10
for attempt in range(max_attempts):
    info_response = requests.post(info_url, json=info_payload, headers=HEADERS)
    info_response.raise_for_status()
    result = info_response.json()["result"]
    if result["status"] == "success":
        file_url = result["file"]
        break
    time.sleep(5)
else:
    raise Exception("–û—Ç—á—ë—Ç –Ω–µ –±—ã–ª –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
response = requests.get(file_url)
response.raise_for_status()

# –ß–∏—Ç–∞–µ–º CSV
df = pd.read_csv(StringIO(response.text), sep=';')

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
df["–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"] = pd.to_datetime(df["–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"], format="%Y-%m-%d %H:%M:%S", errors='coerce')


def analyze_deliveries(date):
    deliveries = df[df["–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"].dt.date == date.date()]
    total_quantity = deliveries["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].sum()
    article_counts = deliveries.groupby("–ê—Ä—Ç–∏–∫—É–ª")["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].sum()

    total_cost = 0
    for article, quantity in article_counts.items():
        cost_per_unit = COST_PER_UNIT.get(article, 0)
        total_cost += cost_per_unit * quantity

    return total_cost, article_counts, total_quantity


transaction_url = "https://api-seller.ozon.ru/v3/finance/transaction/totals"
transaction_payload = {
    "date": {
        "from": yesterday_from,
        "to": yesterday_to
    },
    "posting_number": "",
    "transaction_type": "all"
}

transaction_response = requests.post(transaction_url, json=transaction_payload, headers=HEADERS)
transaction_response.raise_for_status()
transaction_data = transaction_response.json()["result"]

total_cost, article_counts, total_quantity = analyze_deliveries(yesterday)

table_data = {
    "–ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã": transaction_data["accruals_for_sale"],
    "–∫–æ–º–∏—Å—Å–∏—è –û–∑–æ–Ω": transaction_data["sale_commission"],
    "–¥–æ—Å—Ç–∞–≤–∫–∞": transaction_data["processing_and_delivery"],
    "–≤–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã": transaction_data["refunds_and_cancellations"],
    "—É—Å–ª—É–≥–∏/—Ä–µ–∫–ª–∞–º–∞": transaction_data["services_amount"],
    "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏": transaction_data["compensation_amount"],
    "–¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥–∞–≤—Ü–∞": transaction_data["money_transfer"],
    "–¥–æ–ø —É—Å–ª—É–≥–∏": transaction_data["others_amount"],
    "—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤": total_cost
}

total_income = sum([table_data[key] for key in table_data if key != "—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤"])
margin = ((total_income - total_cost) / total_income) * 100 if total_income != 0 else 0
table_data["–∏—Ç–æ–≥–æ–≤–∞—è –º–∞—Ä–∂–∞"] = f"{margin:.2f}%"

def escape_html(text):
    return html.escape(str(text))

lines = []
lines.append(f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Ç–æ–≥–∏ –∑–∞ {yesterday.strftime('%d.%m.%Y')}\n")
lines.append("üõí <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º:</b>")
for article, qty in article_counts.items():
    # –¢–æ–ª—å–∫–æ üíé –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞, –±–µ–∑ üü¢/üî¥
    lines.append(f"üíé {escape_html(article)}:\n{int(qty)}")

lines.append("")  # –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
lines.append("üìä–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

for key, value in table_data.items():
    if key == "–∏—Ç–æ–≥–æ–≤–∞—è –º–∞—Ä–∂–∞":
        # –ø–µ—Ä–µ–¥ –º–∞—Ä–∂–æ–π üìà
        lines.append(f"üìà <b>{escape_html(key)}:</b>\n{value}")
    else:
        # —ç–º–æ–¥–∂–∏ üü¢ –µ—Å–ª–∏ >0 –∏–Ω–∞—á–µ üî¥
        emoji = "üü¢" if value > 0 else "üî¥"
        lines.append(f"{emoji} {escape_html(key)}:\n{float(value):.2f}")

output_text = "\n".join(lines)

print("\n" + output_text)

TELEGRAM_BOT_TOKEN = "7976964368:AAEN5XGC8IuoQ2ajpHCvxmBd0zozhHefa7A"
TELEGRAM_CHAT_ID = "-2830424580"

telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
params = {
    "chat_id": TELEGRAM_CHAT_ID,
    "text": output_text,
    "parse_mode": "HTML"
}

response = requests.post(telegram_url, params=params)
if response.status_code == 200:
    print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
else:
    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
